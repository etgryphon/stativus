- var params;
mixin api_header(functionName, params, isDef)
  - if (isDef) {
  h4 Definition
  - } else {
  h4 Function
  -}
  h3: code #{functionName}
  h4 Parameters
  ul
    - if (!params){
      li: em none
    - } else if (isDef){
      li
        strong Type :: 
        em #{params.type} - 
          - if (params.isOpt){
          strong OPTIONAL
          - } else {
          strong REQUIRED
          - }
      li
        strong Default Value :: 
        em #{params.default}
    - } else {
      - params.forEach( function(x){
       li 
        strong '#{x.name}' :: 
        - if (x.isOpt) {
        em #{x.type} - 
          strong OPTIONAL
        - } else {
        em #{x.type} - 
          strong REQUIRED
        - }
      - });
    - }
  h4 Description
  
mixin api
  //- ***********************************
  //- HTML for the Basic API
  .span9.api-page(style='display: none;')
    .hero-unit.basic-api-header(style='display: none;')
      h1 Basic API
    .hero-unit.advanced-api-header(style='display: none;')
      h1 Advanced API
    .hero-unit.testing-api-header(style='display: none;')
      h1 Testing API
    .hero-unit.all-api-header(style='display: none;')
      h1 Complete API
    //- Stativus Definitions
    //- ***************************
    .basic-api(style='display: none;')
      h2 Stativus
      h6 namespace
      br
    .basic-api(style='display: none;')
      mixin api_header('createStatechart()')
      p This is the function to actually create the statechart.  This is the only function that needs to be called 
        strong: em first
        |  in order for the other functions to work.  This returns a 
        strong: em Stativus.Statechart
        |  object.  You can create as many statecharts as you want. You can even create them in your views to control
        |  how the view works in any of the MVC frameworks out there
      h4 Example
      pre
        | var statechart = Stativus.createStatechart();
      hr
    //- Stativus.Statechart Definitions
    //- ***************************
    h2 Stativus.Statechart
    h6 namespace
    br
    //- Section
    .basic-api(style='display: none;')
      h4 Function
      h3: code addState\( name, def1, def2, ... \)
      h4 Parameters
      ul
        li
          strong 'name' :: 
          em String  - REQUIRED
        li 
          strong 'def
          em n
          strong ' :: 
          em  Object | Hash - REQUIRED &raquo; see Stativus.State.DefinitionParameters
      h4 Description
      p This function creates the state and you pass in the definition of the state.  An interesting bonus is that you 
        | can send in as many of these as you would like.  This helps when you have the same action or configuration that 
        | needs to go in several states.
      h4 Example
      pre
        | statechart.addState( 'first_state', {
        |   // Stativus.State.DefinitionParameters
        | });
      hr
    //- Section
    .basic-api(style='display: none;')
      mixin api_header('initStates( name )', [{name: 'name', type: 'String | Hash'}])
      p This actually initializes the statechart and make the statechart enter the initial state. If the 
        strong 'name' 
        | is a 
        em String 
        | then it represents the name of the state in the 
        em DEFAULT 
        | statechart. If the value is an 
        em Hash | Object 
        | then it represents a key-value pair of the initial states for all the global concurrent states. 
        | global state = 
        em KEY 
        | and initial state name = 
        em VALUE
      h4 Example
      pre
        | // Example #1: String
        | statechart.initStates('first_state');
        | // Example #2: Hash | Object
        | statechart.initStates({'default': 'first_state', 'modal_states': 'first_modal');
      hr
    //- Section
    .basic-api(style='display: none;')
      h4 Function
      h3: code sendEvent\( name, param1, param2, ... \)
      h4 Parameters
      ul
        li
          strong 'name' :: 
          em String - REQUIRED
        li
          strong 'param
          em n
          strong ' :: 
          em  OPTIONAL
      h4 Description
      p This sends an event to all the global concurrent states.  If you are in a state that has the event/action
        | defined then it will respond with this trigger.  You can have 
        em N
        | -number of parameters of any type and they will be passed to the function definition for the event on
        | the current states.
      h4 Example
      pre
        | // Example #1: no params
        | statechart.sendEvent('viewMenu');
        | // Example #2: one param
        | statechart.sendEvent('openMenuItem', 3);
        | // Example #3: n-params
        | statechart.sendEvent('myFavoriteEvent', 3, 'Blue', {lots: 'of', 'other': 'Things'});
      hr
    //- Section
    .basic-api(style='display: none;')
      - params = [{name: 'name', type: 'String'}, {name: 'globalState', type: 'String', isOpt: true}]
      mixin api_header('getState( name, globalState)', params)
      p This is what you call to fetch a state. The second param, 
        em 'globalState' 
        | is an optional param set to the global concurrent state name.  If you don't pass anything in
        | it defaults to 
        em 'default'
        | .
      h4 Example
      pre
        | // Example #1: no global param
        | var state = statechart.getState('state_one');
        | // Example #2: global conncurrent state param
        | var state = statechart.sendEvent('other_state', 'modal_states');
      hr
    //- Section
    .basic-api(style='display: none;')
      mixin api_header('currentState( globalState )', [{name: 'globalState', type: 'String', isOpt: true}])
      p This is a helper function that will give you an array of all the current states that your are in. The param
        em 'globalState' 
        | is an optional param set to the global concurrent state name.  If you don't pass anything in
        | it defaults to 
        em 'default'
        | .
      h4 Example
      pre
        | // Example #1: no global param
        | var states = statechart.currentState();
        | // Example #2: global conncurrent state param
        | var states = statechart.currentState('modal_states');
      hr
      h4 Function
      h3: code getActiveStates\( globalState\)
      h4 Description
      p This is an 
        em alias 
        | for
        code currentState\( ... \)
      hr
    //- Section
    .basic-api(style='display: none;')
      - params = [{name: 'name', type: 'String'}, {name: 'globalState', type: 'String', isOpt: true}]
      mixin api_header('inState( globalState )', params)
      p This is a helper function when you are using the 
        em DEBUG_MODE 
        | version of the code. It will return 
        em true 
        | or 
        em false 
        | if you are in a state. This can be helpful for debugging. Not to be used in production.
        | .
      h4 Example
      pre
        | if ( statechart.inState('state_one', 'default') ) {
        |   // do something ;
        | } 
      hr
      //- Section
    .testing-api(style='display: none;')
      mixin api_header('loadState: function(name, globalStatechart)', [{name: 'name', type: 'String'}, {name:'globalStatechart', type: 'String', isOpt: !0}])
      p This will convert the statechart to a Testing statechart, loading up the named state and permitting testing on there returned start object.
      pre
        | var state = sc.loadState("#testingState");
        | // or
        | var state = sc.loadState("#testingState2", "error");
      h4 Returns
      ul
        li 
          strong Type :: 
          em Stativus.TestStateObject
      mixin api_header('createStateTree: function()', [])
      p This creates a tree representation of the statechart. Where each state
        is represented similarly to the following example. Additionally, global
        concurrent states are represented as concurrent states underneath a
        state named global.
      pre
        | {
        |   events: Array[0]
        |   hasConcurrentSubstates: true
        |   initialSubstate: undefined
        |   isConcurrentSubstate: undefined
        |   isInitialSubstate: undefined
        |   name: "global"
        |   substates: Array[3]
        | }
      h4 Returns
      ul
        li 
          strong Type :: 
          em Hash
    //- Stativus.State
    //- ***************************
    .basic-api(style='display: none;')
      h2 Stativus.State
      h6 namespace
      br
    .basic-api(style='display: none;')
      //- Section
      mixin api_header('goToState( name )', [{name: 'name', type: 'String'}])
      p This is the heart and soul of the statechart. This is what starts the transition from one state to the next. 
        | This is 
        strong: em ONLY 
        | to be called inside an event and as the last line after you 
        em do 
        | what you need to do.
      h4 Example
      pre
        | statechart.addState('loading', {
        |   // Stativus.State.DefinitionParameters...
        |   Stativus.State.DefinedEvents...
        |   completeLoad: function(data){ // <= Event Definition
        |     // do stuff with the 'data'
        |     this.goToState('ready');
        |   },
        |   // other events
        | });
      hr
    .basic-api(style='display: none;')
      //- Section
      - params = [{name: 'name', type: 'String'}, {name: 'isRecursive', type: 'Boolean', isOpt: !0}]
      mixin api_header('goToHistoryState( name )', params)
      p Must like 
        code goToState() 
        | This will transition to the last substate of 
        em 'stateName'
        | . This is 
        strong: em ONLY 
        | to be called inside an event and as the last line after you 
        em do 
        | what you need to do.
      h4 Example
      pre
        | statechart.addState('loading', {
        |   // Stativus.State.DefinitionParameters...
        |   Stativus.State.DefinedEvents...
        |   completeLoad: function(data){ // <= Event Definition
        |     // do stuff with the 'data'
        |     this.goToHistoryState('ready');
        |   },
        |   // other events
        | });
      hr
    .basic-api(style='display: none;')
      //- Section
      - params = [{name: 'key', type: 'String'}, {name: 'value', type: 'ANY'}]
      mixin api_header('setData( key, value )', params)
      p This is the function that sets the local data to the state.  You would use this when you need to pass/set data to 
        | be used in a state.
      h4 Example
      pre
        | var state = statechart.getState('state_one');
        | state.setData('id', 123);
      hr
    .basic-api(style='display: none;')
      //- Section
      mixin api_header('getData( key )', [{name: 'key', type: 'String'}])
      p This is the function that gets the local data to the state.  You would use this when you need to retrieve local state data. 
        | The beauty of the state data storage is that it won't conflict with any other states local data.
      h4 Example
      pre
        | var state = statechart.getState('state_one');
        | state.getData('id');
      hr
    //- Stativus.State.DefinitionParameters
    //- ***************************
    h2 Stativus.State.DefinitionParameters
    h6 definitions
    br
    .basic-api(style='display: none;')
      //- Section
      mixin api_header('globalConcurrentState', {isOpt: !0, type: 'String', default: 'default'}, !0)
      p This is the name of the global concurrent state that this state belongs to.  This is set in the
        code addState()
        | function and does not ever change.
      h4 Example
      pre
        | statechart.addState('state_one', {
        |   globalConcurrentState: 'modal_states'
        |   // more Stativus.State.DefinitionParameters...
        | });
      hr
    .basic-api(style='display: none;')
      //- Section
      mixin api_header('parentState', {isOpt: !0, type: 'String', default: 'undefined'}, !0)
      p This value sets who the parent state of this substate is.  You do not need to add these in order, even though
        | its a good idea.  If you do not set a value or set it to 
        em null 
        | the statechart assumes that this is a top level state. It is added once in
        code addState()
        | function and never changes.
      h4 Example
      pre
        | statechart.addState('substate_one', {
        |   parentState: 'state_one'
        |   // more Stativus.State.DefinitionParameters...
        | });
      hr
    //- Section
    .basic-api(style='display: none;')
      mixin api_header('initialSubstate', {type: 'String', default: 'undefined'}, !0)
      p This value sets in a parent state to tell it what substate to enter when someone calls
        code this.goToState('\< parentStateName \>')
        | . Technically, it isn't 
        em required 
        | persay, but it bad practice to just enter a parent state with substates and not go to a substate. 
        | This is added in the 
        code addState()
        | function and never changes.
      h4 Example
      pre
        | statechart.addState('state_one', {
        |   initialSubstate: 'substate_one',
        |   // more Stativus.State.DefinitionParameters...
        | });
      hr
    //- Section
    .advanced-api(style='display: none;')
      mixin api_header('substatesAreConcurrent', {type: 'Boolean', default: 'undefined'}, !0)
      p This value sets in a parent state to tell it that it should enter all of its substates. This gives you the fine 
        | grain control in substates to do multiple things at the same time. You do not use 
        code initialSubstate
        |  with this because it doesn't make any sense. 
        | This is added in the 
        code addState()
        | function and never changes.
      h4 Example
      pre
        | statechart.addState('state_one', {
        |   substatesAreConcurrent: true,
        |   // more Stativus.State.DefinitionParameters...
        | });
      hr
    //- Section
    .advanced-api(style='display: none;')
      mixin api_header('states', {type: 'Array', default: 'undefined'}, !0)
      p You can define substates within a state for a more concise way of defining your statechart. You do this by defining an 
        | array of hashes with the same APIs as 
        strong Stativus.State.DefinitionParameters 
        | and
        strong Stativus.State.DefinitionEvents
        | . There are two ways 
        | to do this. This is added in the 
        code addState()
        | function and never changes.
      h4 Example Type #1: 
      h5 create configuration code as a HASH
      pre
        | // Example #1:
        | statechart.addState('state_one', {
        |   states: [
        |     {
        |       name: 'substate_one',
        |       enterState: function(){
        |         // define function
        |       }
        |     }
        |   ],
        |   // more Stativus.State.DefinitionParameters...
        | });
        | // Example #2: n-level nesting
        | statechart.addState('state_one', {
        |   states: [
        |     {
        |       name: 'substate_one',
        |       enterState: function(){
        |         // define function
        |       },
        |       states: [
        |         {
        |           name: 'sub-substate_one'
        |           // more Stativus.State.DefinitionParameters...
        |         }
        |       ]
        |     }
        |   ],
        |   // more Stativus.State.DefinitionParameters...
        | });
      h4 Example Type #2:
      h5 You can also pass an array where the first argument 
        strong \(String - REQUIRED\) 
        | is the name, next n-argument are config hashes
      pre
        | // Example #3: With shared functionality
        | statechart.addState('state_one', {
        |   states: [
        |     ['#substate_one', mySharedFunctions, /* <= shared function hash >*/ {
        |       enterState: function(){
        |         // define function
        |       }
        |     }],
        |     ['#substate_two', mySharedFunctions, /* <= shared function hash >*/ {
        |       enterState: function(){
        |         // define function
        |       }
        |     }],
        |   // more Stativus.State.DefinitionParameters...
        | });
        | 
      hr
    //- Stativus.State.DefinitionEvents
    //- ***************************
    h2 Stativus.State.DefinitionEvents
    h6 definitions
    br
    .basic-api(style='display: none;')
      //- Section
      mixin api_header('enterState: function()')
      p This is the first of the important default state events that need to be defined.  This event gets called when a state
        | gets entered.  This is 
        em optional 
        | and is added in the 
        code addState()
        | function and never changes.
      h4 Example
      pre
        | statechart.addState('state_one', {
        |   // Stativus.State.DefinitionParameters...
        |   enterState: function(){
        |     // code that sets up the view or state.
        |   },
        |   // more Stativus.State.DefinitionEvents...
        | });
      hr
    //- Section
    .advanced-api(style='display: none;')
      mixin api_header('willEnterState: function( statechart )', [{name: 'done', type: 'function'}])
      p This is the pre-loading event to be used for async functionality. You would need to return 
        strong true 
        | from this function to pause the statechart allowing the async event to happen then you need to call 
        code done()
        |  to restart the statechart transition from state to state
      pre
        | sc.addState("#second", {
        |   willEnterState: function(done){
        |     $('#content .boosh').animate({
        |       left: 911,
        |       complete: function () {
        |         done(); // REQUIRED!!: call this function to 
        |                 // restart the statechart transitions
        |       }
        |     });
        |     return true; // REQUIRED!!: return true so Stativus knows to stop the 
        |                  // transitions and wait for animation or other async code.
        |   },
        |   enterState: function(){ ... }
        | });
    //- Section
    .advanced-api(style='display: none;')
      mixin api_header('didEnterState: function()')
      p This is the post-loading event that you can use to do any last minute functionality
      pre
        | sc.addState("#second", {
        |   didEnterState: function(){
        |     // setup refresh timers or fire an event
        |   }
        | });
    //- Section
    .basic-api(style='display: none;')
      mixin api_header('exitState: function()')
      p This is the second most important of the default state events that need to be defined.  This event gets called when a state
        | gets exited.  This is 
        em optional 
        | and is added in the 
        code addState()
        | function and never changes.
      h4 Example
      pre
        | statechart.addState('state_one', {
        |   // Stativus.State.DefinitionParameters...
        |   exitState: function(){
        |     // code that tears down the view or state.
        |   },
        |   // more Stativus.State.DefinitionEvents...
        | });
      hr
    .advanced-api(style='display: none;')
      mixin api_header('willExitState: function( done )', [{name: 'done', type: 'function'}])
      p This is the pre-exit event to be used for async functionality. You would need to return 
        strong true 
        | from this function to pause the statechart allowing the async event to happen then you need to call 
        code done()
        |  to restart the statechart transition from state to state
      pre
        | sc.addState("#second", {
        |   willExitState: function(done){
        |     $('#content .boosh').animate({
        |       right: 911,
        |       complete: function () {
        |         done(); // REQUIRED!!: call this function to 
        |                 // restart the statechart transitions
        |       }
        |     });
        |     return true; // REQUIRED!!: return true so Stativus knows to stop the 
        |                  // transitions and wait for animation or other async code.
        |   },
        |   exitState: function(){ ... }
        | });
        //- Section
    .advanced-api(style='display: none;')
      mixin api_header('didExitState: function()')
      p This is the post-exiting event that you can use to do any last minute functionality
      pre
        | sc.addState("#second", {
        |   didExitState: function(){
        |     // kill variables; fire events; or send data.
        |   }
        | });
    
    //- Stativus.State.DefinitionEvents
    //- ***************************
    h2 Stativus.TestStateObject
    h6 definitions
    br
    .testing-api(style='display: none;')
      mixin api_header('enterState: function()')
      p This is a function that will trigger an `enterState` call that can then test the state.
      pre
        | var state = statechart.loadState('state1');
        | state.enterState();
    .testing-api(style='display: none;')
      mixin api_header('willEnterState: function(done)', [{name: 'done', type: 'function'}])
      p This is a function that will trigger an `willEnterState` call that can then test the state. Example is using `qUnit` tests
      pre
        | var state = SC.loadState("#async");
        | state.willEnterState(function(){
        |   start();
        | });
        | stop();
    .testing-api(style='display: none;')
      mixin api_header('willExitCompleted: function()')
      p This is a function that will return if the asynchronous call was made in the 'willEnterState' function
      pre
        | var state = SC.loadState("#async");
        | state.willEnterState(function(){
        |   start();
        |   ok(state.willExitCompleted(), 'Will exit async call was completed');
        |   equal(mockObject.willExitCount, 1, 'willExitCount was successfully called');
        | });
        | stop();
    .testing-api(style='display: none;')
      mixin api_header('exitState: function()')
      p This is a function that will trigger an `exitState` call that can then test the state.
      pre
        | var state = statechart.loadState('state1');
        | state.exitState();
    .testing-api(style='display: none;')
      mixin api_header('willExitState: function(done)', [{name: 'done', type: 'function'}])
      p This is a function that will trigger an `willExitState` call that can then test the state. Example is using `qUnit` tests
      pre
        | var state = SC.loadState("#async");
        | state.willExitState(function(){
        |   start();
        | });
        | stop();
    .testing-api(style='display: none;')
      mixin api_header('willExitCompleted: function()')
      p This is a function that will return if the asynchronous call was made in the 'willEnterState' function
      pre
        | var state = SC.loadState("#async");
        | state.willExitState(function(){
        |   start();
        |   ok(state.willExitCompleted(), 'Will exit async call was completed');
        |   equal(mockObject.willExitCount, 1, 'willExitCount was successfully called');
        | });
        | stop();
    .testing-api(style='display: none;')
      mixin api_header('transitionTo: function(name)', [{name: 'name', type: 'String'}])
      p This is a function that will return true if the last action resulted in the state needing to transition to a different state
      pre
        | var state = SC.loadState("#async");
        | state.enterState(); // switch state that immediately transitions to a new state
        | ok(state.transitionedTo('newState'), 'state proper transition');
